21-01-01 22:24:29.197 :   task: usrnet
  model: plain4
  gpu_ids: [0]
  scale: 1
  n_channels: 3
  merge_bn: False
  merge_bn_startpoint: 300000
  datasets:[
    train:[
      name: train_dataset
      dataset_type: usrnet
      dataroot_H: trainsets/trainH
      dataroot_L: None
      H_size: 96
      use_flip: True
      use_rot: True
      scales: [1]
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 48
      phase: train
      scale: 1
      n_channels: 3
    ]
    test:[
      name: test_dataset
      dataset_type: usrnet
      dataroot_H: testsets/set5
      dataroot_L: None
      phase: test
      scale: 1
      n_channels: 3
    ]
  ]
  path:[
    root: SR
    pretrained_netG: None
    task: SR/usrnet
    log: SR/usrnet
    options: SR/usrnet/options
    models: SR/usrnet/models
    images: SR/usrnet/images
  ]
  netG:[
    net_type: usrnet
    n_iter: 6
    h_nc: 32
    in_nc: 4
    out_nc: 3
    nc: [16, 32, 64, 64]
    nb: 2
    gc: 32
    ng: 2
    reduction: 16
    act_mode: R
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_wd: 0
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [100000, 200000, 300000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
  ]
  opt_path: options/train_usrnet.json
  is_train: True

21-01-01 22:24:29.197 : Random seed: 3316
21-01-01 22:24:29.668 : Number of train images: 800, iters: 17
21-01-01 22:24:38.072 : 
Networks name: USRNet
Params number: 590332
Net structure:
USRNet(
  (d): DataNet()
  (p): ResUNet(
    (m_head): Conv2d(4, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (m_down1): Sequential(
      (0): ResBlock(
        (res): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): ResBlock(
        (res): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): Conv2d(16, 32, kernel_size=(2, 2), stride=(2, 2), bias=False)
    )
    (m_down2): Sequential(
      (0): ResBlock(
        (res): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): ResBlock(
        (res): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): Conv2d(32, 64, kernel_size=(2, 2), stride=(2, 2), bias=False)
    )
    (m_down3): Sequential(
      (0): ResBlock(
        (res): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): ResBlock(
        (res): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): Conv2d(64, 64, kernel_size=(2, 2), stride=(2, 2), bias=False)
    )
    (m_body): Sequential(
      (0): ResBlock(
        (res): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): ResBlock(
        (res): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (m_up3): Sequential(
      (0): ConvTranspose2d(64, 64, kernel_size=(2, 2), stride=(2, 2), bias=False)
      (1): ResBlock(
        (res): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): ResBlock(
        (res): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (m_up2): Sequential(
      (0): ConvTranspose2d(64, 32, kernel_size=(2, 2), stride=(2, 2), bias=False)
      (1): ResBlock(
        (res): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): ResBlock(
        (res): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (m_up1): Sequential(
      (0): ConvTranspose2d(32, 16, kernel_size=(2, 2), stride=(2, 2), bias=False)
      (1): ResBlock(
        (res): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): ResBlock(
        (res): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (m_tail): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (h): HyPaNet(
    (mlp): Sequential(
      (0): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
      (3): ReLU(inplace=True)
      (4): Conv2d(32, 12, kernel_size=(1, 1), stride=(1, 1))
      (5): Softplus(beta=1, threshold=20)
    )
  )
)

21-01-01 22:24:38.082 : 
 |  mean  |  min   |  max   |  std   || shape               
 | -0.001 | -0.097 |  0.102 |  0.033 | torch.Size([16, 4, 3, 3]) || p.m_head.weight
 |  0.000 | -0.065 |  0.058 |  0.017 | torch.Size([16, 16, 3, 3]) || p.m_down1.0.res.0.weight
 | -0.000 | -0.059 |  0.054 |  0.017 | torch.Size([16, 16, 3, 3]) || p.m_down1.0.res.2.weight
 |  0.000 | -0.049 |  0.056 |  0.017 | torch.Size([16, 16, 3, 3]) || p.m_down1.1.res.0.weight
 |  0.000 | -0.055 |  0.053 |  0.017 | torch.Size([16, 16, 3, 3]) || p.m_down1.1.res.2.weight
 | -0.000 | -0.096 |  0.102 |  0.025 | torch.Size([32, 16, 2, 2]) || p.m_down1.2.weight
 | -0.000 | -0.043 |  0.045 |  0.012 | torch.Size([32, 32, 3, 3]) || p.m_down2.0.res.0.weight
 |  0.000 | -0.048 |  0.054 |  0.012 | torch.Size([32, 32, 3, 3]) || p.m_down2.0.res.2.weight
 | -0.000 | -0.043 |  0.042 |  0.012 | torch.Size([32, 32, 3, 3]) || p.m_down2.1.res.0.weight
 | -0.000 | -0.048 |  0.049 |  0.012 | torch.Size([32, 32, 3, 3]) || p.m_down2.1.res.2.weight
 |  0.000 | -0.067 |  0.058 |  0.018 | torch.Size([64, 32, 2, 2]) || p.m_down2.2.weight
 |  0.000 | -0.033 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || p.m_down3.0.res.0.weight
 | -0.000 | -0.030 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || p.m_down3.0.res.2.weight
 |  0.000 | -0.032 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || p.m_down3.1.res.0.weight
 | -0.000 | -0.036 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || p.m_down3.1.res.2.weight
 |  0.000 | -0.047 |  0.050 |  0.012 | torch.Size([64, 64, 2, 2]) || p.m_down3.2.weight
 | -0.000 | -0.038 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || p.m_body.0.res.0.weight
 | -0.000 | -0.035 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || p.m_body.0.res.2.weight
 | -0.000 | -0.035 |  0.038 |  0.008 | torch.Size([64, 64, 3, 3]) || p.m_body.1.res.0.weight
 | -0.000 | -0.034 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || p.m_body.1.res.2.weight
 |  0.000 | -0.052 |  0.045 |  0.013 | torch.Size([64, 64, 2, 2]) || p.m_up3.0.weight
 | -0.000 | -0.033 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || p.m_up3.1.res.0.weight
 |  0.000 | -0.033 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || p.m_up3.1.res.2.weight
 |  0.000 | -0.033 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || p.m_up3.2.res.0.weight
 |  0.000 | -0.031 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || p.m_up3.2.res.2.weight
 | -0.000 | -0.066 |  0.068 |  0.018 | torch.Size([64, 32, 2, 2]) || p.m_up2.0.weight
 | -0.000 | -0.048 |  0.043 |  0.012 | torch.Size([32, 32, 3, 3]) || p.m_up2.1.res.0.weight
 |  0.000 | -0.044 |  0.042 |  0.012 | torch.Size([32, 32, 3, 3]) || p.m_up2.1.res.2.weight
 |  0.000 | -0.047 |  0.041 |  0.012 | torch.Size([32, 32, 3, 3]) || p.m_up2.2.res.0.weight
 | -0.000 | -0.041 |  0.037 |  0.012 | torch.Size([32, 32, 3, 3]) || p.m_up2.2.res.2.weight
 | -0.000 | -0.087 |  0.090 |  0.025 | torch.Size([32, 16, 2, 2]) || p.m_up1.0.weight
 | -0.001 | -0.052 |  0.061 |  0.017 | torch.Size([16, 16, 3, 3]) || p.m_up1.1.res.0.weight
 | -0.000 | -0.062 |  0.059 |  0.017 | torch.Size([16, 16, 3, 3]) || p.m_up1.1.res.2.weight
 | -0.000 | -0.060 |  0.053 |  0.017 | torch.Size([16, 16, 3, 3]) || p.m_up1.2.res.0.weight
 |  0.000 | -0.058 |  0.055 |  0.017 | torch.Size([16, 16, 3, 3]) || p.m_up1.2.res.2.weight
 | -0.000 | -0.057 |  0.055 |  0.017 | torch.Size([3, 16, 3, 3]) || p.m_tail.weight
 |  0.004 | -0.068 |  0.084 |  0.035 | torch.Size([32, 2, 1, 1]) || h.mlp.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([32]) || h.mlp.0.bias
 | -0.000 | -0.108 |  0.096 |  0.035 | torch.Size([32, 32, 1, 1]) || h.mlp.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([32]) || h.mlp.2.bias
 | -0.002 | -0.087 |  0.086 |  0.035 | torch.Size([12, 32, 1, 1]) || h.mlp.4.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([12]) || h.mlp.4.bias

21-01-01 22:34:35.456 : <epoch: 12, iter:     200, lr:1.000e-04> G_loss: 1.065e-01 
21-01-01 22:44:46.314 : <epoch: 24, iter:     400, lr:1.000e-04> G_loss: 9.227e-02 
21-01-01 22:55:17.783 : <epoch: 37, iter:     600, lr:1.000e-04> G_loss: 8.016e-02 
21-01-01 23:06:07.609 : <epoch: 49, iter:     800, lr:1.000e-04> G_loss: 5.862e-02 
21-01-01 23:16:37.690 : <epoch: 62, iter:   1,000, lr:1.000e-04> G_loss: 4.779e-02 
21-01-01 23:26:39.816 : <epoch: 74, iter:   1,200, lr:1.000e-04> G_loss: 5.477e-02 
21-01-01 23:37:01.710 : <epoch: 87, iter:   1,400, lr:1.000e-04> G_loss: 4.749e-02 
21-01-01 23:47:06.519 : <epoch: 99, iter:   1,600, lr:1.000e-04> G_loss: 4.903e-02 
21-01-01 23:57:05.585 : <epoch:112, iter:   1,800, lr:1.000e-04> G_loss: 4.556e-02 
21-01-02 00:06:54.847 : <epoch:124, iter:   2,000, lr:1.000e-04> G_loss: 4.417e-02 
21-01-02 00:17:04.141 : <epoch:137, iter:   2,200, lr:1.000e-04> G_loss: 3.464e-02 
21-01-02 00:27:01.433 : <epoch:149, iter:   2,400, lr:1.000e-04> G_loss: 3.882e-02 
21-01-02 00:37:19.194 : <epoch:162, iter:   2,600, lr:1.000e-04> G_loss: 3.852e-02 
21-01-02 00:47:23.067 : <epoch:174, iter:   2,800, lr:1.000e-04> G_loss: 3.853e-02 
21-01-02 00:57:29.399 : <epoch:187, iter:   3,000, lr:1.000e-04> G_loss: 4.192e-02 
21-01-02 01:07:48.391 : <epoch:199, iter:   3,200, lr:1.000e-04> G_loss: 3.899e-02 
21-01-02 01:17:58.724 : <epoch:212, iter:   3,400, lr:1.000e-04> G_loss: 2.840e-02 
21-01-02 01:28:14.335 : <epoch:224, iter:   3,600, lr:1.000e-04> G_loss: 4.249e-02 
21-01-02 01:38:24.220 : <epoch:237, iter:   3,800, lr:1.000e-04> G_loss: 4.297e-02 
21-01-02 01:48:37.454 : <epoch:249, iter:   4,000, lr:1.000e-04> G_loss: 4.209e-02 
21-01-02 01:58:42.892 : <epoch:262, iter:   4,200, lr:1.000e-04> G_loss: 3.926e-02 
21-01-02 02:08:36.624 : <epoch:274, iter:   4,400, lr:1.000e-04> G_loss: 3.608e-02 
21-01-02 02:18:54.046 : <epoch:287, iter:   4,600, lr:1.000e-04> G_loss: 3.755e-02 
21-01-02 02:29:00.777 : <epoch:299, iter:   4,800, lr:1.000e-04> G_loss: 3.741e-02 
21-01-02 02:39:09.421 : <epoch:312, iter:   5,000, lr:1.000e-04> G_loss: 3.278e-02 
21-01-02 02:39:09.422 : Saving the model.
21-01-02 12:30:47.493 :   task: usrnet
  model: plain4
  gpu_ids: [0]
  scale: 1
  n_channels: 3
  merge_bn: False
  merge_bn_startpoint: 300000
  datasets:[
    train:[
      name: train_dataset
      dataset_type: usrnet
      dataroot_H: trainsets/trainH
      dataroot_L: None
      H_size: 96
      use_flip: True
      use_rot: True
      scales: [1]
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 48
      phase: train
      scale: 1
      n_channels: 3
    ]
    test:[
      name: test_dataset
      dataset_type: usrnet
      dataroot_H: testsets/set5
      dataroot_L: None
      phase: test
      scale: 1
      n_channels: 3
    ]
  ]
  path:[
    root: SR
    pretrained_netG: SR/usrnet/models/5000_G.pth
    task: SR/usrnet
    log: SR/usrnet
    options: SR/usrnet/options
    models: SR/usrnet/models
    images: SR/usrnet/images
  ]
  netG:[
    net_type: usrnet
    n_iter: 6
    h_nc: 32
    in_nc: 4
    out_nc: 3
    nc: [16, 32, 64, 64]
    nb: 2
    gc: 32
    ng: 2
    reduction: 16
    act_mode: R
    upsample_mode: convtranspose
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 1
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_wd: 0
    G_optimizer_clipgrad: None
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [100000, 200000, 300000, 400000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
  ]
  opt_path: options/train_usrnet.json
  is_train: True

21-01-02 12:30:47.494 : Random seed: 5182
21-01-02 12:30:48.185 : Number of train images: 800, iters: 17
21-01-02 12:30:57.486 : 
Networks name: USRNet
Params number: 590332
Net structure:
USRNet(
  (d): DataNet()
  (p): ResUNet(
    (m_head): Conv2d(4, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (m_down1): Sequential(
      (0): ResBlock(
        (res): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): ResBlock(
        (res): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): Conv2d(16, 32, kernel_size=(2, 2), stride=(2, 2), bias=False)
    )
    (m_down2): Sequential(
      (0): ResBlock(
        (res): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): ResBlock(
        (res): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): Conv2d(32, 64, kernel_size=(2, 2), stride=(2, 2), bias=False)
    )
    (m_down3): Sequential(
      (0): ResBlock(
        (res): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): ResBlock(
        (res): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): Conv2d(64, 64, kernel_size=(2, 2), stride=(2, 2), bias=False)
    )
    (m_body): Sequential(
      (0): ResBlock(
        (res): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): ResBlock(
        (res): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (m_up3): Sequential(
      (0): ConvTranspose2d(64, 64, kernel_size=(2, 2), stride=(2, 2), bias=False)
      (1): ResBlock(
        (res): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): ResBlock(
        (res): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (m_up2): Sequential(
      (0): ConvTranspose2d(64, 32, kernel_size=(2, 2), stride=(2, 2), bias=False)
      (1): ResBlock(
        (res): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): ResBlock(
        (res): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (m_up1): Sequential(
      (0): ConvTranspose2d(32, 16, kernel_size=(2, 2), stride=(2, 2), bias=False)
      (1): ResBlock(
        (res): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): ResBlock(
        (res): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace=True)
          (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (m_tail): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (h): HyPaNet(
    (mlp): Sequential(
      (0): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
      (3): ReLU(inplace=True)
      (4): Conv2d(32, 12, kernel_size=(1, 1), stride=(1, 1))
      (5): Softplus(beta=1, threshold=20)
    )
  )
)

21-01-02 12:30:57.507 : 
 |  mean  |  min   |  max   |  std   || shape               
 | -0.001 | -0.105 |  0.117 |  0.041 | torch.Size([16, 4, 3, 3]) || p.m_head.weight
 |  0.001 | -0.157 |  0.091 |  0.023 | torch.Size([16, 16, 3, 3]) || p.m_down1.0.res.0.weight
 | -0.004 | -0.288 |  0.126 |  0.031 | torch.Size([16, 16, 3, 3]) || p.m_down1.0.res.2.weight
 |  0.000 | -0.088 |  0.081 |  0.021 | torch.Size([16, 16, 3, 3]) || p.m_down1.1.res.0.weight
 | -0.003 | -0.134 |  0.101 |  0.026 | torch.Size([16, 16, 3, 3]) || p.m_down1.1.res.2.weight
 | -0.000 | -0.108 |  0.104 |  0.029 | torch.Size([32, 16, 2, 2]) || p.m_down1.2.weight
 | -0.000 | -0.154 |  0.138 |  0.019 | torch.Size([32, 32, 3, 3]) || p.m_down2.0.res.0.weight
 |  0.000 | -0.110 |  0.131 |  0.017 | torch.Size([32, 32, 3, 3]) || p.m_down2.0.res.2.weight
 | -0.000 | -0.178 |  0.147 |  0.020 | torch.Size([32, 32, 3, 3]) || p.m_down2.1.res.0.weight
 |  0.000 | -0.209 |  0.277 |  0.028 | torch.Size([32, 32, 3, 3]) || p.m_down2.1.res.2.weight
 |  0.000 | -0.113 |  0.141 |  0.022 | torch.Size([64, 32, 2, 2]) || p.m_down2.2.weight
 |  0.000 | -0.100 |  0.066 |  0.011 | torch.Size([64, 64, 3, 3]) || p.m_down3.0.res.0.weight
 |  0.000 | -0.093 |  0.087 |  0.013 | torch.Size([64, 64, 3, 3]) || p.m_down3.0.res.2.weight
 |  0.000 | -0.059 |  0.063 |  0.010 | torch.Size([64, 64, 3, 3]) || p.m_down3.1.res.0.weight
 |  0.000 | -0.203 |  0.162 |  0.012 | torch.Size([64, 64, 3, 3]) || p.m_down3.1.res.2.weight
 |  0.000 | -0.050 |  0.048 |  0.013 | torch.Size([64, 64, 2, 2]) || p.m_down3.2.weight
 | -0.000 | -0.067 |  0.059 |  0.012 | torch.Size([64, 64, 3, 3]) || p.m_body.0.res.0.weight
 | -0.000 | -0.116 |  0.104 |  0.013 | torch.Size([64, 64, 3, 3]) || p.m_body.0.res.2.weight
 | -0.000 | -0.104 |  0.116 |  0.012 | torch.Size([64, 64, 3, 3]) || p.m_body.1.res.0.weight
 | -0.000 | -0.106 |  0.123 |  0.012 | torch.Size([64, 64, 3, 3]) || p.m_body.1.res.2.weight
 |  0.000 | -0.051 |  0.052 |  0.013 | torch.Size([64, 64, 2, 2]) || p.m_up3.0.weight
 | -0.000 | -0.071 |  0.078 |  0.011 | torch.Size([64, 64, 3, 3]) || p.m_up3.1.res.0.weight
 |  0.000 | -0.099 |  0.110 |  0.012 | torch.Size([64, 64, 3, 3]) || p.m_up3.1.res.2.weight
 | -0.000 | -0.090 |  0.083 |  0.010 | torch.Size([64, 64, 3, 3]) || p.m_up3.2.res.0.weight
 |  0.000 | -0.076 |  0.089 |  0.011 | torch.Size([64, 64, 3, 3]) || p.m_up3.2.res.2.weight
 |  0.000 | -0.069 |  0.093 |  0.020 | torch.Size([64, 32, 2, 2]) || p.m_up2.0.weight
 |  0.000 | -0.135 |  0.115 |  0.018 | torch.Size([32, 32, 3, 3]) || p.m_up2.1.res.0.weight
 |  0.000 | -0.189 |  0.199 |  0.021 | torch.Size([32, 32, 3, 3]) || p.m_up2.1.res.2.weight
 |  0.000 | -0.123 |  0.107 |  0.015 | torch.Size([32, 32, 3, 3]) || p.m_up2.2.res.0.weight
 |  0.000 | -0.071 |  0.077 |  0.016 | torch.Size([32, 32, 3, 3]) || p.m_up2.2.res.2.weight
 | -0.000 | -0.094 |  0.097 |  0.029 | torch.Size([32, 16, 2, 2]) || p.m_up1.0.weight
 | -0.001 | -0.070 |  0.122 |  0.019 | torch.Size([16, 16, 3, 3]) || p.m_up1.1.res.0.weight
 |  0.000 | -0.160 |  0.178 |  0.028 | torch.Size([16, 16, 3, 3]) || p.m_up1.1.res.2.weight
 | -0.001 | -0.116 |  0.074 |  0.021 | torch.Size([16, 16, 3, 3]) || p.m_up1.2.res.0.weight
 |  0.001 | -0.124 |  0.136 |  0.026 | torch.Size([16, 16, 3, 3]) || p.m_up1.2.res.2.weight
 |  0.001 | -0.087 |  0.072 |  0.028 | torch.Size([3, 16, 3, 3]) || p.m_tail.weight
 | -0.021 | -0.330 |  0.227 |  0.155 | torch.Size([32, 2, 1, 1]) || h.mlp.0.weight
 |  0.066 | -0.008 |  0.188 |  0.078 | torch.Size([32]) || h.mlp.0.bias
 |  0.021 | -0.108 |  0.271 |  0.070 | torch.Size([32, 32, 1, 1]) || h.mlp.2.weight
 |  0.029 | -0.005 |  0.156 |  0.053 | torch.Size([32]) || h.mlp.2.bias
 | -0.021 | -0.497 |  0.179 |  0.091 | torch.Size([12, 32, 1, 1]) || h.mlp.4.weight
 | -0.033 | -0.345 |  0.063 |  0.115 | torch.Size([12]) || h.mlp.4.bias

21-01-02 12:41:06.085 : <epoch: 12, iter:   5,200, lr:1.000e-04> G_loss: 3.436e-02 
21-01-02 12:51:14.774 : <epoch: 24, iter:   5,400, lr:1.000e-04> G_loss: 3.186e-02 
21-01-02 13:01:31.966 : <epoch: 37, iter:   5,600, lr:1.000e-04> G_loss: 3.190e-02 
21-01-02 13:11:40.411 : <epoch: 49, iter:   5,800, lr:1.000e-04> G_loss: 4.112e-02 
21-01-02 13:21:53.305 : <epoch: 62, iter:   6,000, lr:1.000e-04> G_loss: 3.289e-02 
21-01-02 13:31:43.361 : <epoch: 74, iter:   6,200, lr:1.000e-04> G_loss: 3.359e-02 
21-01-02 13:42:06.733 : <epoch: 87, iter:   6,400, lr:1.000e-04> G_loss: 4.446e-02 
21-01-02 13:52:15.462 : <epoch: 99, iter:   6,600, lr:1.000e-04> G_loss: 2.966e-02 
21-01-02 14:02:24.779 : <epoch:112, iter:   6,800, lr:1.000e-04> G_loss: 3.238e-02 
21-01-02 14:12:27.043 : <epoch:124, iter:   7,000, lr:1.000e-04> G_loss: 3.682e-02 
21-01-02 14:22:32.411 : <epoch:137, iter:   7,200, lr:1.000e-04> G_loss: 3.484e-02 
21-01-02 14:32:46.159 : <epoch:149, iter:   7,400, lr:1.000e-04> G_loss: 3.303e-02 
21-01-02 14:43:16.643 : <epoch:162, iter:   7,600, lr:1.000e-04> G_loss: 3.068e-02 
21-01-02 14:53:25.189 : <epoch:174, iter:   7,800, lr:1.000e-04> G_loss: 2.930e-02 
21-01-02 15:03:35.508 : <epoch:187, iter:   8,000, lr:1.000e-04> G_loss: 3.203e-02 
21-01-02 15:13:42.934 : <epoch:199, iter:   8,200, lr:1.000e-04> G_loss: 3.333e-02 
21-01-02 15:24:04.850 : <epoch:212, iter:   8,400, lr:1.000e-04> G_loss: 2.834e-02 
21-01-02 15:34:06.165 : <epoch:224, iter:   8,600, lr:1.000e-04> G_loss: 3.113e-02 
21-01-02 15:44:34.589 : <epoch:237, iter:   8,800, lr:1.000e-04> G_loss: 3.941e-02 
21-01-02 15:54:40.350 : <epoch:249, iter:   9,000, lr:1.000e-04> G_loss: 2.964e-02 
21-01-02 16:05:04.852 : <epoch:262, iter:   9,200, lr:1.000e-04> G_loss: 3.242e-02 
21-01-02 16:15:10.115 : <epoch:274, iter:   9,400, lr:1.000e-04> G_loss: 2.749e-02 
21-01-02 16:25:41.607 : <epoch:287, iter:   9,600, lr:1.000e-04> G_loss: 3.525e-02 
21-01-02 16:35:51.725 : <epoch:299, iter:   9,800, lr:1.000e-04> G_loss: 2.572e-02 
21-01-02 16:46:28.223 : <epoch:312, iter:  10,000, lr:1.000e-04> G_loss: 3.337e-02 
21-01-02 16:46:28.224 : Saving the model.
